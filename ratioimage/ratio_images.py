# AUTOGENERATED! DO NOT EDIT! File to edit: 00_ratio_images.ipynb (unless otherwise specified).

__all__ = ['create_img_dict_from_folder', 'measure_region_props_to_tidy_df',
           'ratiometric_measure_region_props_to_tidy_df']

# Cell
import re

import pandas as pd
from py_clone_detective.utils import extend_region_properties_list, generate_random_cmap
from skimage import io, measure

# Cell
def create_img_dict_from_folder(
    load_pattern: str, img_regex: str = r"\w\dg\d\d?", label: bool = False, **kwargs
):
    img_collection = io.ImageCollection(load_pattern, **kwargs)

    img_dict = {
        re.search(img_regex, file)[0]: img_collection[i]
        for i, file in enumerate(img_collection.files)
    }

    if label:
        img_dict = {key: measure.label(value) for key, value in img_dict.items()}

    return img_dict

# Cell
def measure_region_props_to_tidy_df(int_imgs: dict, lab_imgs: dict, **reg_prop_kwargs):
    l = list()
    for image_key, img in int_imgs.items():
        df = pd.DataFrame(
            measure.regionprops_table(
                lab_imgs[image_key], intensity_image=img, **reg_prop_kwargs
            )
        )
        df["image_key"] = image_key

        l.append(df)

    return pd.concat(l)

# Cell
def ratiometric_measure_region_props_to_tidy_df(
    num_imgs: dict,
    denom_imgs: dict,
    lab_imgs: dict,
    region_properties: list = None,
    **reg_prop_kwargs
):
    num_rprops = extend_region_properties_list(region_properties)
    denom_rprops = only_intensity_region_properties(num_rprops)

    df = pd.merge(
        measure_region_props_to_tidy_df(num_imgs, lab_imgs, properties=num_rprops),
        measure_region_props_to_tidy_df(denom_imgs, lab_imgs, properties=denom_rprops),
        how="left",
        on=("image_key", "label"),
        suffixes=("_num", "_denom"),
    )

    return df.eval("ratio_mean_int = mean_intensity_num/mean_intensity_denom")