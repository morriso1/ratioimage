# AUTOGENERATED! DO NOT EDIT! File to edit: 00_ratioimage.ipynb (unless otherwise specified).

__all__ = ['create_img_dict_from_folder', 'measure_region_props_to_tidy_df',
           'num_div_denom_measure_region_props_to_tidy_df']

# Cell
import re

from skimage import io

# Cell
def create_img_dict_from_folder(
    load_pattern: str, label_img_re: str = r"\w\dg\d\d?", **kwargs
):
    img_collection = io.ImageCollection(**kwargs)
    labelled_img_dict = {
        re.search(label_img_re, file)[0]: img_collection[i]
        for i, file in enumerate(img_collection.files)
    }
    return labelled_img_dict

# Cell
def measure_region_props_to_tidy_df(
    img_dictionary, labelled_dictionary_img_masks, **kwargs
):

    df_to_append = pd.DataFrame()

    for key, img in img_dictionary.items():
        df = pd.DataFrame(
            measure.regionprops_table(
                labelled_dictionary_img_masks[key], intensity_image=img, **kwargs
            )
        )
        df["image_key"] = key

        df_to_append = df_to_append.append(df).reset_index(drop=True)

    return df_to_append

# Cell
def num_div_denom_measure_region_props_to_tidy_df(
    num_img_dict,
    denom_img_dict,
    label_imgs,
    sample_id_categories=None,
    properties_num=["label", "area", "mean_intensity"],
    properties_denom=["label", "mean_intensity"],
):
    df = pd.merge(
        measure_region_props_to_tidy_df(
            num_img_dict, label_imgs, properties=properties_num
        ),
        measure_region_props_to_tidy_df(
            denom_img_dict, label_imgs, properties=properties_denom
        ),
        how="left",
        on=("image_key", "label"),
        suffixes=("_num", "_denom"),
    )
    if sample_id_categories is not None:
        df = df.assign(
            mean_intensity_num_div_denom=lambda x: x["mean_intensity_num"]
            / x["mean_intensity_denom"],
            sample_id=lambda x: pd.Categorical(
                x["image_key"].str.split("g", expand=True)[0],
                categories=sample_id_categories,
            ),
            gut_id=lambda x: x["image_key"].str.split("g", expand=True)[1],
        )

    else:
        df = df.assign(
            mean_intensity_num_div_denom=lambda x: x["mean_intensity_num"]
            / x["mean_intensity_denom"],
            sample_id=lambda x: pd.Categorical(
                x["image_key"].str.split("g", expand=True)[0]),
            gut_id=lambda x: x["image_key"].str.split("g", expand=True)[1],
        )

    return df